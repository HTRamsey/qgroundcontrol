name: Caching
description: Setup Caching
inputs:
  host:
    description: Host OS
    required: true
  target:
    description: Target OS
    required: true
  build-type:
    description: Build Type
    required: true
    type: choice
    options:
      - Debug
      - Release
  cpm-modules:
    description: Path to CPM Modules
    required: false
  ccache-version:
    description: ccache Version to Install
    required: false
    default: 4.11.3
runs:
  using: composite
  steps:
    - name: Cache ccache binary
      if: inputs.host == 'linux' && inputs.target != 'linux_gcc_arm64'
      id: cache-ccache-binary
      uses: actions/cache@v4
      with:
        path: ~/ccache-${{ inputs.ccache-version }}
        key: ccache-binary-${{ inputs.ccache-version }}-linux-x86_64

    - name: Download ccache (Linux)
      if: inputs.host == 'linux' && inputs.target != 'linux_gcc_arm64' && steps.cache-ccache-binary.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -euo pipefail
        echo "Downloading ccache v${{ inputs.ccache-version }}..."
        wget --quiet https://github.com/ccache/ccache/releases/download/v${{ inputs.ccache-version }}/ccache-${{ inputs.ccache-version }}-linux-x86_64.tar.xz
        echo "Extracting archive..."
        tar -xf ccache-${{ inputs.ccache-version }}-linux-x86_64.tar.xz
        mv ccache-${{ inputs.ccache-version }}-linux-x86_64 ~/ccache-${{ inputs.ccache-version }}

    - name: Install ccache (Linux)
      if: inputs.host == 'linux' && inputs.target != 'linux_gcc_arm64'
      shell: bash
      run: |
        set -euo pipefail
        cd ~/ccache-${{ inputs.ccache-version }}
        echo "Installing ccache..."
        sudo make install
        echo "ccache installed successfully"
        ccache --version

    - name: Setup sccache (Windows)
      if: runner.os == 'Windows' && inputs.target != 'android'
      uses: mozilla-actions/sccache-action@v0.0.8

    - run: echo "SCCACHE_GHA_ENABLED=true" >> "$GITHUB_ENV"
      if: runner.os == 'Windows' && inputs.target != 'android'
      shell: bash

    - name: Setup Build Cache
      uses: hendrikmuhs/ccache-action@v1.2.14
      with:
        variant: ${{ runner.os == 'Windows' && inputs.target != 'android' && 'sccache' || 'ccache' }}
        key: ${{ inputs.host }}-${{ inputs.target }}-${{ inputs.build-type }}
        restore-keys: |
          ${{ inputs.host }}-${{ inputs.target }}
          ${{ inputs.host }}-
        max-size: 2G
        verbose: 1
        append-timestamp: false

    - name: Ensure cpm-modules directory exists
      if: inputs.cpm-modules != ''
      run: mkdir -p "${{ inputs.cpm-modules }}"
      shell: bash

    - name: Cache CPM Modules
      if: inputs.cpm-modules != ''
      uses: actions/cache@v4
      with:
        path: ${{ inputs.cpm-modules }}
        key: ${{ inputs.host }}-${{ inputs.target }}-cpm-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ inputs.host }}-${{ inputs.target }}-cpm-
          ${{ inputs.host }}-cpm-
