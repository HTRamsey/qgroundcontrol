name: Windows

# Build QGroundControl for Windows (x64, ARM64, and cross-compiled)

on:
  push:
    branches:
      - master
      - Stable*
    tags:
      - v*
    paths-ignore:
      - docs/**
  pull_request:
    paths:
      - .github/workflows/windows.yml
      - .github/actions/**
      - deploy/windows/**
      - src/**
      - CMakeLists.txt
      - cmake/**
      - tools/setup/*windows*
  workflow_dispatch:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' && github.ref_type != 'tag' }}

permissions:
  contents: read

jobs:
  build:
    name: Build ${{ matrix.arch }} ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            host: windows
            arch: win64_msvc2022_64
            build_type: Release
            package: QGroundControl-installer-AMD64

          - os: windows-11-arm
            host: windows_arm64
            arch: win64_msvc2022_arm64
            build_type: Release
            package: QGroundControl-installer-ARM64

          - os: windows-2022
            host: windows
            arch: win64_msvc2022_arm64_cross_compiled
            build_type: Release
            package: QGroundControl-installer-AMD64-ARM64

    defaults:
      run:
        shell: cmd

    env:
      QT_VERSION: 6.10.0

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          submodules: recursive
          fetch-depth: ${{ github.ref_type == 'tag' && 0 || 1 }}
          fetch-tags: true

      - name: Common setup
        uses: ./.github/actions/common

      - name: Install GStreamer
        if: matrix.arch == 'win64_msvc2022_64'
        uses: blinemedical/setup-gstreamer@v1
        with:
          version: 1.22.12

      - name: Setup cache
        uses: ./.github/actions/cache
        with:
          host: ${{ matrix.host }}
          target: ${{ matrix.arch }}
          build-type: ${{ matrix.build_type }}
          cpm-modules: ${{ runner.temp }}\build\cpm_modules

      - name: Install Qt ${{ env.QT_VERSION }}
        uses: ./.github/actions/qt-install
        with:
          version: ${{ env.QT_VERSION }}
          host: ${{ matrix.host }}
          target: desktop
          arch: ${{ matrix.arch }}
          dir: ${{ runner.temp }}

      - name: Set up MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ (matrix.arch == 'win64_msvc2022_64' && 'x64') || (matrix.arch == 'win64_msvc2022_arm64' && 'arm64') || 'amd64_arm64' }}

      - name: Configure
        working-directory: ${{ runner.temp }}\build
        run: |
          ${{ env.QT_ROOT_DIR }}\bin\qt-cmake -S ${{ github.workspace }} -B . -G Ninja ^
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ^
            -DQGC_STABLE_BUILD=${{ (github.ref_type == 'tag' || contains(github.ref, 'Stable')) && 'ON' || 'OFF' }} ^
            -DQGC_ENABLE_GST_VIDEOSTREAMING=${{ matrix.arch == 'win64_msvc2022_64' && 'ON' || 'OFF' }} ^
            -DQT_HOST_PATH=${{ (matrix.arch == 'win64_msvc2022_arm64_cross_compiled') && format('{0}\\..\\msvc2022_64', env.QT_ROOT_DIR) || '' }}

      - name: Build
        shell: bash
        working-directory: ${{ runner.temp }}\build
        run: |
          BUILD_START_TIME=$(date +%s)
          cmake --build . --target all --config ${{ matrix.build_type }} --parallel
          BUILD_END_TIME=$(date +%s)
          BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
          echo "Build completed in ${BUILD_DURATION} seconds"
          echo "BUILD_DURATION=${BUILD_DURATION}" >> $GITHUB_ENV

      - name: Verify Executable
        if: matrix.build_type == 'Release' && matrix.arch != 'win64_msvc2022_arm64_cross_compiled'
        working-directory: ${{ runner.temp }}\build\${{ matrix.build_type }}
        run: QGroundControl.exe --simple-boot-test

      - name: Create Installer
        working-directory: ${{ runner.temp }}\build
        run: cmake --install . --config ${{ matrix.build_type }}

      - name: Upload artifact (installer)
        if: matrix.build_type == 'Release'
        uses: ./.github/actions/upload
        permissions:
          contents: write
        with:
          artifact_name: ${{ matrix.package }}.exe
          package_name: ${{ matrix.package }}
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_distribution_id: ${{ secrets.AWS_DISTRIBUTION_ID }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_aws: ${{ matrix.arch == 'win64_msvc2022_arm64_cross_compiled' && 'false' || 'true' }}
          retention-days: ${{ github.ref_type == 'tag' && 90 || 7 }}
