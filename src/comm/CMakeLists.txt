find_package(Qt6 REQUIRED COMPONENTS Bluetooth Core Core5Compat Network Qml Test OPTIONAL_COMPONENTS SerialPort)

qt_add_library(comm STATIC
	BluetoothLink.cc
	BluetoothLink.h
	LinkConfiguration.cc
	LinkConfiguration.h
	LinkInterface.cc
	LinkInterface.h
	LinkManager.cc
	LinkManager.h
	LogReplayLink.cc
	LogReplayLink.h
	MavlinkMessagesTimer.cc
	MavlinkMessagesTimer.h
	MAVLinkProtocol.cc
	MAVLinkProtocol.h
	QGCMAVLink.cc
	QGCMAVLink.h
	QGCSerialPortInfo.cc
	QGCSerialPortInfo.h
	SerialLink.cc
	SerialLink.h
	TCPLink.cc
	TCPLink.h
	UdpIODevice.cc
	UdpIODevice.h
	UDPLink.cc
	UDPLink.h
)

if(QGC_BUILD_TESTING)
	target_sources(comm
		PRIVATE
			MockLink.cc
			MockLink.h
			MockLinkFTP.cc
			MockLinkFTP.h
			MockLinkMissionItemHandler.cc
			MockLinkMissionItemHandler.h
	)
endif()

target_link_libraries(comm
	PRIVATE
		Qt6::Core5Compat
		Qt6::Qml
		Qt6::Test
		gps
		PositionManager
		Vehicle
	PUBLIC
		Qt6::Bluetooth
		Qt6::Core
		Qt6::Network
		qgc
		QmlControls
)

if(NOT QT6_DISABLE_DNSENGINE)
	target_link_libraries(comm PUBLIC qmdnsengine)
endif()

if(ANDROID)
	target_compile_definitions(comm PUBLIC QGC_ENABLE_BLUETOOTH)
else()
	target_link_libraries(comm PUBLIC Qt6::SerialPort)
endif()

target_include_directories(comm
    PUBLIC
    	${CMAKE_CURRENT_SOURCE_DIR}
        ${CMAKE_SOURCE_DIR}/libs/mavlink/include/mavlink/v2.0
        ${CMAKE_SOURCE_DIR}/libs/mavlink/include/mavlink/v2.0/all
        ${CMAKE_SOURCE_DIR}/libs/mavlink/include/mavlink/v2.0/common
)
